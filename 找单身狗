找出一个只出现过一次的数字的问题处理方法就是找一个数字把里面所有的数字都异或一遍，利用异或两次等于没异或的特点来处理。那么如果有两个数字都只出现了一次，那么如此得到的应该是两个数异或的结果。首先这个结果肯定不是0（要不然就全都配对了），所以里面一定至少一位是一。找出值为1的一位，以这一位的值将结果分为两组。例如1 2 3 4 1 2，异或完的结果应该是3^4得到的111，那么随便找一位就行了。例如找最低位，那么这一位是1的有1 3 1，是0的有2 4 2，由于是利用异或结果为1的某一位分的组，所以两个待查询数字一定分别在两组中。所以再找两个变量，分别异或两组数，即可找到这两个数。

void findTwoNum(int arr[], int n, int * pnum1, int * pnum2)
{
 int i;
 int sum = 0;
​
 for (i = 0; i < 9; i++)
 {
  sum ^= arr[i];
 } //先找到两个数互相异或的结果
​
 int pos;
 for (i = 0; i < 32; i++)
 {
  if (sum & 1 << i)
  {
   pos = i;
   break;
  }
 } //再找到有分歧的一位。在这一位上，两个数一定是一个1一个0
​
 *pnum1 = *pnum2 = 0;
 for (i = 0; i < 10; i++)
 {
  if (arr[i] & 1 << pos)
  {
   *pnum1 ^= arr[i]; //这一位是1的，放在数1里
  }
  else
  {
   *pnum2 ^= arr[i]; //这一位是0的，放在数2里
  }
 }
}
