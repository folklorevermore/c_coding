由于杨氏矩阵的特点决定了针对表中的任一元素，下方和右方的数据一定大于我，左方和上方的数据一定小于我，所以查找的时候可以利用这一特点，从左上或者右下角来找。因为这两个位置的大于小于是有区分度的。例如我选择从左上角找，那么没有上边和右边，所以下边一定比我大，左边一定比我小，那么要查找的数字如果比我大，那我就向下，如果比我小，那我就向左，这样查找的次数只有x+y-1次，符合题目中要求的O(n)。

#include <stdio.h>
 
int findnum(int a[][3], int x, int y, int f) //第一个参数的类型需要调整
{
	int i = 0, j = x - 1; //从左上角开始遍历
 
	while (j >= 0 && i < y)
	{
		if (a[i][j] < f) //比我大就向下
		{
			i++;
		}
		else if (a[i][j] > f) //比我小就向左
		{
			j--;
		}
		else
		{
			return 1;
		}
	}
	return 0;
}
 
int main()
{
	int a[][3] = { {1, 3, 5},
				  {3, 5, 7}, 
				  {5, 7, 9} }; //一个示例
 
	if (findnum(a, 3, 3, 2))
	{
		printf("It has been found!\n");
	}
	else
	{
		printf("It hasn't been found!\n");
	}
 
	return 0;
}
